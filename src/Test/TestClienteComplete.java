package Test;

import config.DatabaseConnection;
import services.ClienteService;
import dao.impl.ClienteDAOImpl;
import dao.interfaces.IClienteDAO;
import models.Cliente;
import java.util.List;
import java.util.Optional;

public class TestClienteComplete {
    
    public static void main(String[] args) {
        System.out.println("=== PRUEBA COMPLETA DEL M√ìDULO DE CLIENTES ===\n");
        
        try {
            // Verificar conexi√≥n
            System.out.println("1. üîó Verificando conexi√≥n a base de datos...");
            DatabaseConnection.getInstance();
            System.out.println("   ‚úÖ Conexi√≥n establecida\n");
            
            // Test del modelo
            testModelo();
            
            // Test del DAO
            testDAO();
            
            // Test del Service
            testService();
            
            // Test de validaciones
            testValidaciones();
            
            // Test de b√∫squedas
            testBusquedas();
            
            // Resumen final
            System.out.println("\n" + "=".repeat(60));
            System.out.println("üéâ TODAS LAS PRUEBAS DEL M√ìDULO CLIENTES COMPLETADAS");
            System.out.println("=".repeat(60));
            System.out.println("‚úÖ Modelo Cliente funcionando correctamente");
            System.out.println("‚úÖ ClienteDAO funcionando correctamente");
            System.out.println("‚úÖ ClienteService funcionando correctamente");
            System.out.println("‚úÖ Validaciones funcionando correctamente");
            System.out.println("‚úÖ B√∫squedas funcionando correctamente");
            System.out.println("\nüöÄ El m√≥dulo est√° listo para usar en producci√≥n!");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error durante las pruebas: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private static void testModelo() {
        System.out.println("2. üë§ Probando modelo Cliente...");
        
        // Constructor vac√≠o
        Cliente cliente1 = new Cliente();
        assert cliente1.isActivo() : "Cliente deber√≠a estar activo por defecto";
        assert "CEDULA".equals(cliente1.getTipoDocumento()) : "Tipo documento por defecto deber√≠a ser CEDULA";
        System.out.println("   ‚úÖ Constructor vac√≠o OK");
        
        // Constructor con par√°metros
        Cliente cliente2 = new Cliente("CEDULA", "1234567890", "Juan", "P√©rez", 
                                     "juan@email.com", "0999888777", "Calle 123");
        assert "Juan".equals(cliente2.getNombre()) : "Nombre no asignado correctamente";
        assert "1234567890".equals(cliente2.getNumeroDocumento()) : "Documento no asignado correctamente";
        System.out.println("   ‚úÖ Constructor con par√°metros OK");
        
        // M√©todos de utilidad
        cliente2.setApellido("Gonz√°lez");
        assert "Juan Gonz√°lez".equals(cliente2.getNombreCompleto()) : "Nombre completo incorrecto";
        assert cliente2.esPersonaNatural() : "Deber√≠a ser persona natural";
        assert !cliente2.esPersonaJuridica() : "No deber√≠a ser persona jur√≠dica";
        System.out.println("   ‚úÖ M√©todos de utilidad OK");
        
        // Display text
        String displayText = cliente2.getDisplayText();
        assert displayText.contains("1234567890") : "Display text deber√≠a contener documento";
        assert displayText.contains("Juan Gonz√°lez") : "Display text deber√≠a contener nombre";
        System.out.println("   ‚úÖ Display text OK");
        
        System.out.println("   ‚úÖ Modelo Cliente: TODAS LAS PRUEBAS PASARON\n");
    }
    
    private static void testDAO() {
        System.out.println("3. üóÑÔ∏è Probando ClienteDAO...");
        
        IClienteDAO clienteDAO = new ClienteDAOImpl();
        
        // Test de conteos iniciales
        int totalInicial = clienteDAO.contarClientes();
        int activosInicial = clienteDAO.contarClientesActivos();
        System.out.println("   üìä Estado inicial: " + totalInicial + " clientes, " + activosInicial + " activos");
        
        // Test crear cliente
        Cliente nuevoCliente = new Cliente("CEDULA", "0999888777", "Mar√≠a", "Garc√≠a", 
                                         "maria@test.com", "0988777666", "Av. Test 456");
        
        boolean creado = clienteDAO.crear(nuevoCliente);
        assert creado : "Cliente deber√≠a haberse creado";
        assert nuevoCliente.getId() > 0 : "Cliente deber√≠a tener ID asignado";
        System.out.println("   ‚úÖ Crear cliente OK (ID: " + nuevoCliente.getId() + ")");
        
        // Test obtener por ID
        Optional<Cliente> clienteOpt = clienteDAO.obtenerPorId(nuevoCliente.getId());
        assert clienteOpt.isPresent() : "Cliente deber√≠a existir";
        Cliente clienteObtenido = clienteOpt.get();
        assert "Mar√≠a".equals(clienteObtenido.getNombre()) : "Nombre no coincide";
        System.out.println("   ‚úÖ Obtener por ID OK");
        
        // Test obtener por documento
        Optional<Cliente> clientePorDoc = clienteDAO.obtenerPorDocumento("0999888777");
        assert clientePorDoc.isPresent() : "Cliente deber√≠a encontrarse por documento";
        assert clientePorDoc.get().getId() == nuevoCliente.getId() : "IDs deber√≠an coincidir";
        System.out.println("   ‚úÖ Obtener por documento OK");
        
        // Test actualizar
        clienteObtenido.setNombre("Mar√≠a Isabel");
        boolean actualizado = clienteDAO.actualizar(clienteObtenido);
        assert actualizado : "Cliente deber√≠a haberse actualizado";
        
        Optional<Cliente> clienteActualizado = clienteDAO.obtenerPorId(nuevoCliente.getId());
        assert clienteActualizado.isPresent() : "Cliente deber√≠a existir despu√©s de actualizar";
        assert "Mar√≠a Isabel".equals(clienteActualizado.get().getNombre()) : "Nombre no se actualiz√≥";
        System.out.println("   ‚úÖ Actualizar cliente OK");
        
        // Test validaciones
        assert clienteDAO.existeDocumento("0999888777") : "Documento deber√≠a existir";
        assert clienteDAO.existeEmail("maria@test.com") : "Email deber√≠a existir";
        assert !clienteDAO.existeDocumento("1111111111") : "Documento inexistente no deber√≠a existir";
        System.out.println("   ‚úÖ Validaciones de existencia OK");
        
        // Test b√∫squedas
        List<Cliente> busquedaNombre = clienteDAO.buscarPorNombre("Mar√≠a");
        assert !busquedaNombre.isEmpty() : "B√∫squeda por nombre deber√≠a encontrar resultados";
        System.out.println("   ‚úÖ B√∫squeda por nombre OK (" + busquedaNombre.size() + " resultados)");
        
        // Test eliminar (desactivar)
        boolean eliminado = clienteDAO.eliminar(nuevoCliente.getId());
        assert eliminado : "Cliente deber√≠a haberse eliminado";
        
        Optional<Cliente> clienteEliminado = clienteDAO.obtenerPorId(nuevoCliente.getId());
        assert clienteEliminado.isPresent() : "Cliente deber√≠a existir (solo desactivado)";
        assert !clienteEliminado.get().isActivo() : "Cliente deber√≠a estar inactivo";
        System.out.println("   ‚úÖ Eliminar (desactivar) cliente OK");
        
        // Test conteos finales
        int totalFinal = clienteDAO.contarClientes();
        int activosFinal = clienteDAO.contarClientesActivos();
        int inactivosFinal = clienteDAO.contarClientesInactivos();
        
        assert totalFinal == totalInicial + 1 : "Total deber√≠a haber aumentado en 1";
        assert activosFinal == activosInicial : "Activos deber√≠an ser los mismos (cliente desactivado)";
        assert inactivosFinal >= 1 : "Deber√≠a haber al menos 1 inactivo";
        System.out.println("   üìä Estado final: " + totalFinal + " clientes, " + activosFinal + " activos, " + inactivosFinal + " inactivos");
        
        System.out.println("   ‚úÖ ClienteDAO: TODAS LAS PRUEBAS PASARON\n");
    }
    
    private static void testService() {
        System.out.println("4. ‚öôÔ∏è Probando ClienteService...");
        
        ClienteService clienteService = ClienteService.getInstance();
        
        // Test crear cliente v√°lido
        Cliente clienteValido = new Cliente("RUC", "1234567890001", "Empresa Test", "", 
                                          "empresa@test.com", "0999111222", "Oficina 123");
        
        boolean creadoService = clienteService.crearCliente(clienteValido);
        assert creadoService : "Cliente v√°lido deber√≠a crearse";
        System.out.println("   ‚úÖ Crear cliente v√°lido OK (ID: " + clienteValido.getId() + ")");
        
        // Test crear cliente inv√°lido (documento duplicado)
        Cliente clienteDuplicado = new Cliente("RUC", "1234567890001", "Otra Empresa", "", 
                                             "otra@test.com", "0999333444", "Otra oficina");
        
        boolean creadoDuplicado = clienteService.crearCliente(clienteDuplicado);
        assert !creadoDuplicado : "Cliente con documento duplicado no deber√≠a crearse";
        System.out.println("   ‚úÖ Validaci√≥n documento duplicado OK");
        
        // Test obtener clientes
        List<Cliente> clientesActivos = clienteService.obtenerClientesActivos();
        assert !clientesActivos.isEmpty() : "Deber√≠a haber clientes activos";
        System.out.println("   ‚úÖ Obtener clientes activos OK (" + clientesActivos.size() + " clientes)");
        
        // Test b√∫squeda
        List<Cliente> busqueda = clienteService.buscarClientes("Empresa");
        assert !busqueda.isEmpty() : "B√∫squeda deber√≠a encontrar resultados";
        System.out.println("   ‚úÖ B√∫squeda de clientes OK (" + busqueda.size() + " resultados)");
        
        // Test estad√≠sticas
        String estadisticas = clienteService.getEstadisticasClientes();
        assert estadisticas != null && !estadisticas.isEmpty() : "Estad√≠sticas no deber√≠an estar vac√≠as";
        System.out.println("   üìä Estad√≠sticas: " + estadisticas);
        
        // Test actualizar cliente
        clienteValido.setNombre("Empresa Test Actualizada");
        boolean actualizado = clienteService.actualizarCliente(clienteValido);
        assert actualizado : "Cliente deber√≠a actualizarse";
        System.out.println("   ‚úÖ Actualizar cliente OK");
        
        // Test eliminar cliente
        boolean eliminado = clienteService.eliminarCliente(clienteValido.getId());
        assert eliminado : "Cliente deber√≠a eliminarse";
        System.out.println("   ‚úÖ Eliminar cliente OK");
        
        System.out.println("   ‚úÖ ClienteService: TODAS LAS PRUEBAS PASARON\n");
    }
    
    private static void testValidaciones() {
        System.out.println("5. ‚úÖ Probando validaciones...");
        
        ClienteService service = ClienteService.getInstance();
        
        // Test tipos de documento
        String[] tipos = service.getTiposDocumento();
        assert tipos.length == 3 : "Deber√≠an ser 3 tipos de documento";
        assert "C√©dula".equals(tipos[0]) : "Primer tipo deber√≠a ser C√©dula";
        System.out.println("   ‚úÖ Tipos de documento OK");
        
        // Test conversiones
        assert "CEDULA".equals(service.convertirTipoDocumentoADB("C√©dula")) : "Conversi√≥n a DB incorrecta";
        assert "C√©dula".equals(service.convertirTipoDocumentoADisplay("CEDULA")) : "Conversi√≥n a display incorrecta";
        System.out.println("   ‚úÖ Conversiones de tipo documento OK");
        
        // Test cliente inv√°lido (sin nombre)
        Cliente clienteInvalido1 = new Cliente("CEDULA", "1234567890", "", "", "", "", "");
        boolean creadoInvalido1 = service.crearCliente(clienteInvalido1);
        assert !creadoInvalido1 : "Cliente sin nombre no deber√≠a crearse";
        System.out.println("   ‚úÖ Validaci√≥n nombre requerido OK");
        
        // Test cliente inv√°lido (documento inv√°lido)
        Cliente clienteInvalido2 = new Cliente("CEDULA", "123", "Juan", "P√©rez", "", "", "");
        boolean creadoInvalido2 = service.crearCliente(clienteInvalido2);
        assert !creadoInvalido2 : "Cliente con documento inv√°lido no deber√≠a crearse";
        System.out.println("   ‚úÖ Validaci√≥n formato documento OK");
        
        // Test cliente inv√°lido (email inv√°lido)
        Cliente clienteInvalido3 = new Cliente("CEDULA", "9876543210", "Ana", "L√≥pez", "email_invalido", "", "");
        boolean creadoInvalido3 = service.crearCliente(clienteInvalido3);
        assert !creadoInvalido3 : "Cliente con email inv√°lido no deber√≠a crearse";
        System.out.println("   ‚úÖ Validaci√≥n formato email OK");
        
        System.out.println("   ‚úÖ Validaciones: TODAS LAS PRUEBAS PASARON\n");
    }
    
    private static void testBusquedas() {
        System.out.println("6. üîç Probando b√∫squedas avanzadas...");
        
        ClienteService service = ClienteService.getInstance();
        IClienteDAO dao = new ClienteDAOImpl();
        
        // Crear clientes de prueba para b√∫squedas
        Cliente cliente1 = new Cliente("CEDULA", "1111111111", "Carlos", "Rodr√≠guez", 
                                     "carlos@search.com", "0999000111", "B√∫squeda 1");
        Cliente cliente2 = new Cliente("RUC", "2222222222001", "Empresa B√∫squeda", "", 
                                     "empresa@search.com", "0999000222", "B√∫squeda 2");
        Cliente cliente3 = new Cliente("PASAPORTE", "PASS123456", "John", "Smith", 
                                     "john@search.com", "0999000333", "B√∫squeda 3");
        
        service.crearCliente(cliente1);
        service.crearCliente(cliente2);
        service.crearCliente(cliente3);
        
        // Test b√∫squeda por nombre completo
        List<Cliente> busquedaCarlos = dao.buscarPorNombreCompleto("Carlos");
        assert !busquedaCarlos.isEmpty() : "Deber√≠a encontrar a Carlos";
        System.out.println("   ‚úÖ B√∫squeda por nombre completo OK (" + busquedaCarlos.size() + " resultados)");
        
        // Test b√∫squeda por tipo de documento
        List<Cliente> cedulas = dao.obtenerPorTipoDocumento("CEDULA");
        List<Cliente> rucs = dao.obtenerPorTipoDocumento("RUC");
        List<Cliente> pasaportes = dao.obtenerPorTipoDocumento("PASAPORTE");
        
        assert !cedulas.isEmpty() : "Deber√≠a haber c√©dulas";
        assert !rucs.isEmpty() : "Deber√≠a haber RUCs";
        assert !pasaportes.isEmpty() : "Deber√≠a haber pasaportes";
        System.out.println("   ‚úÖ B√∫squeda por tipo documento OK (C:" + cedulas.size() + 
                          ", R:" + rucs.size() + ", P:" + pasaportes.size() + ")");
        
        // Test b√∫squeda con filtros
        List<Cliente> filtrados = dao.buscarConFiltros("search", "CEDULA", true);
        System.out.println("   ‚úÖ B√∫squeda con filtros OK (" + filtrados.size() + " resultados)");
        
        // Test √∫ltimos creados
        List<Cliente> ultimos = dao.obtenerUltimosCreados(5);
        assert !ultimos.isEmpty() : "Deber√≠a haber √∫ltimos creados";
        assert ultimos.size() <= 5 : "No deber√≠a retornar m√°s de 5";
        System.out.println("   ‚úÖ √öltimos creados OK (" + ultimos.size() + " resultados)");
        
        // Limpiar clientes de prueba
        service.eliminarCliente(cliente1.getId());
        service.eliminarCliente(cliente2.getId());
        service.eliminarCliente(cliente3.getId());
        System.out.println("   üßπ Limpieza de datos de prueba OK");
        
        System.out.println("   ‚úÖ B√∫squedas avanzadas: TODAS LAS PRUEBAS PASARON\n");
    }
}